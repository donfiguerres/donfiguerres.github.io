<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on Don Figuerres</title><link>https://donfiguerres.com/posts/software-development/</link><description>Recent content in Software Development on Don Figuerres</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 23 Jun 2022 23:34:00 +0800</lastBuildDate><atom:link href="https://donfiguerres.com/posts/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Common Tools for Software Development</title><link>https://donfiguerres.com/posts/software-development/common-tools/</link><pubDate>Thu, 23 Jun 2022 23:34:00 +0800</pubDate><guid>https://donfiguerres.com/posts/software-development/common-tools/</guid><description>List of tools that I&amp;rsquo;ve used throughout my development career that you might find useful too. I use this list when setting up a new VM or workstation.
Browser Google Chrome It&amp;rsquo;s most people&amp;rsquo;s default browser although Edge has a better performance in Windows. Brave Browser I use this personally for browsing. It has a lot of default privacy features. Can be used to test if a website will continue to function if all the security and privacy features are enabled.</description></item><item><title>Java Performance Testing Using Zerocode</title><link>https://donfiguerres.com/posts/software-development/java/java-performance-testing-using-zerocode/</link><pubDate>Wed, 22 Jun 2022 23:10:00 +0800</pubDate><guid>https://donfiguerres.com/posts/software-development/java/java-performance-testing-using-zerocode/</guid><description>In one of my previous projects, I had to add a performance testing suite for our Java APIs to measure the performance gain in the performance improvement that I was working on.
After some research, I found that Zerocode is able to fulfill our needs. Their GitHub Repo also includes an extensive documentation which made the process much easier for me.
I found that you can reuse your existing JUnit tests as performance tests using the LoadWith annotation.</description></item></channel></rss>